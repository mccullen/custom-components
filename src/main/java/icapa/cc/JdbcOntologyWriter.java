package icapa.cc;

import icapa.Const;
import icapa.models.HeaderProperties;
import icapa.models.JdbcOntologyConnectionParams;
import icapa.models.JdbcOntologyWriterParams;
import icapa.services.AnalysisEngine;
import icapa.services.JdbcOntologyWriterService;
import icapa.services.JdbcOntologyConnection;
import icapa.services.OntologyConnection;
import org.apache.log4j.Logger;
import org.apache.uima.UimaContext;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.fit.descriptor.ConfigurationParameter;
import org.apache.uima.jcas.JCas;
import org.apache.uima.resource.ResourceInitializationException;

import java.io.IOException;

public class JdbcOntologyWriter extends AbstractJdbcWriter {
    private static final Logger LOGGER = Logger.getLogger(JdbcOntologyWriter.class.getName());

    public static final String PARAM_TABLE = "Table";
    @ConfigurationParameter(
        name = PARAM_TABLE,
        description = "Table",
        defaultValue = "",
        mandatory = true
    )
    private String _table;

    public static final String PARAM_CREATE_TABLE_SUFFIX = "CreateTableSuffix";
    @ConfigurationParameter(
        name = PARAM_CREATE_TABLE_SUFFIX,
        description = "Any additional lines you want to add to the end of the CREATE TABLE statement. This may be useful for adding an autoincrementing identity column. For example, if you wanted to add an auto-increment column with a primary key constraint in teradata you could set this to \"Annotation_Id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, CONSTRAINT pk PRIMARY KEY (Annotation_Id)\". ",
        mandatory = false
    )
    private String _createTableSuffix;

    public static final String PARAM_DOCUMENT_ID_COL_AND_DATATYPE = "DocumentIdColAndDatatype";
    public static final String DEFAULT_VALUE_DOCUMENT_ID_COL_AND_DATATYPE = Const.DOCUMENT_ID_HEADER + " VARCHAR(100)";
    @ConfigurationParameter(
        name = PARAM_DOCUMENT_ID_COL_AND_DATATYPE,
        description = "The name and datatype of the document id column that will be inserted into your annotation Table. This will be a VARCHAR by default because the DocumentIdAnnotation's documentId feature is a String. If you choose another datatype such as INT, then you MUST ensure that the documentId can be cast to an INT. The documentId for a given document is usually set by the collection reader so consult its documentation to make sure the documentId gets set correctly. ",
        mandatory = false,
        defaultValue = DEFAULT_VALUE_DOCUMENT_ID_COL_AND_DATATYPE
    )
    private String _documentIdColAndDatatype;

    @ConfigurationParameter(
        name = Const.PARAM_KEEP_ALL,
        description = Const.PARAM_KEEP_ALL_DESCRIPTION,
        mandatory = false,
        defaultValue = "true"
    )
    private boolean _keepAll;

    private AnalysisEngine _writer;
    private JdbcOntologyWriterParams _params = new JdbcOntologyWriterParams();

    @Override
    public void initialize(UimaContext context) throws ResourceInitializationException {
        super.initialize(context);
        _params.setJdbcWriterParams(getParams()); // inherited params
        _params.setTable(_table);
        _params.setKeepAll(_keepAll);
        _params.setCreateTableSuffix(_createTableSuffix);
        _params.setDocumentIdColAndDatatype(getDocHeader());
        _params.setOntologyConnection(getOntologyConnection());

        _writer = JdbcOntologyWriterService.fromParams(_params);
        _writer.initialize(context);
    }

    private OntologyConnection getOntologyConnection() {
        // Set sql connection
        JdbcOntologyConnectionParams ontologyConnectionParams = new JdbcOntologyConnectionParams();
        ontologyConnectionParams.setPassword(getParams().getPassword());
        ontologyConnectionParams.setUsername(getParams().getUsername());
        ontologyConnectionParams.setDocumentIdColAndDatatype(_params.getDocumentIdColAndDatatype());
        ontologyConnectionParams.setUrl(_params.getJdbcWriterParams().getUrl());
        ontologyConnectionParams.setDriverClassName(getParams().getDriverClassName());
        ontologyConnectionParams.setCreateTableSuffix(_params.getCreateTableSuffix());
        ontologyConnectionParams.setBatchSize(_params.getJdbcWriterParams().getBatchSize());
        OntologyConnection sqlConnection = JdbcOntologyConnection.fromParams(ontologyConnectionParams);
        return sqlConnection;
    }

    private HeaderProperties getDocHeader() {
        // Create the custom col/datatype pair by splitting the string on a space.
        String[] parts = _documentIdColAndDatatype.split(" ");
        HeaderProperties docHeader = new HeaderProperties();
        docHeader.setName(parts[0]);
        docHeader.setDataType(parts[1]);
        return docHeader;
    }

    @Override
    public void process(JCas jCas) throws AnalysisEngineProcessException {
        _writer.process(jCas);
    }

    @Override
    public void destroy() {
        super.destroy();
        try {
            _writer.close();
        } catch (IOException e) {
            LOGGER.error("Error closing jdbc service", e);
        }
    }
}
